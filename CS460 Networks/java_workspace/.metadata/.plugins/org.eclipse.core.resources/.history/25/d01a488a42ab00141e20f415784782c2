/**
 * @author Kelvin Rodriguez (KR788)
 * @date   1/31/15
 * 
 *  This files contains the three required sorting algorithms
 *  Bubble sort, selection sort, and insertion sort
 */

package CS249_Project1;

import java.util.Arrays;
import java.util.function.*;

/**
 * Class that contains the required sorting algorithms, 
 * the name may not very practical, but it's cute.
 * @author KR788
 */
public class SortingOfAllSorts {
	
	// arrays to use for testing
	private final static int INVERSE_SORTED_ARRAY[] = {9,8,7,6,5,4,3,2,1,0};
	private final static int PARTIAL_SORTED_ARRAY[] = {1,2,3,4,5,6,9,8,7,0};
	
	private final static arrayLens = INVERSE_SORTED_ARRAY.length;
	
	
	/**
	 * A simple class holding sorting metrics, the number of 
	 * comparison and the copy instructions executed during sorting
	 */
	public static class SortData{
		public int comparisonCount;
		public int copyCount;
		
		@Override 
		public String toString() {
			return "comparisonCount = " + comparisonCount
			    +", copyCount = " + copyCount;
		}
	}
	
	/**
	 * Simple off-the-shelf bubble sort algorithm
	 * (i.e no optimization using flags and what-not)
	 * @param array the array to be sorted
	 * @return a SortData object containing sorting metrics 
	 */
	public static SortData bubbleSort(int[] array){
		SortData results = new SortData();
		int temp;
		for(int i = 0; i < array.length-1; i++)
			for(int j = 0; j < array.length-1; j++){
				results.comparisonCount++;
				if(array[j] > array[j+1]){
					results.copyCount += 3;
					//swap ////////////////
					temp = array[j];
					array[j] = array[j+1];
					array[j+1] = temp;
					////////////////////////
				}
			}
		return results;
	}
	
	/**
	 * Simple off-the-shelf selection sort algorithm
	 * (i.e no optimization using flags and what-not)
	 * @param array the array to be sorted
	 * @return a SortData object holding the metric data
	 */
	public static SortData selectionSort(int[] array){
		SortData results = new SortData();
		int temp;
		int minValIndex;
		
		for(int i = 0; i < array.length; i++){
			minValIndex = i;
			for(int j = i; j < array.length; j++){
				results.comparisonCount++;
				if(array[j] < array[minValIndex])
					minValIndex = j;
			}
			
			if(minValIndex != i){
				results.copyCount+=3;
				temp = array[i];
				array[i] = array[minValIndex];
				array[minValIndex] = temp;
			}
		}
		
		return results;
	}
	
	/**
	 * Prints out simple metrics for determining efficiency for both
	 * the partially sorted and inversely sorted array
	 * @param sortMethod the sort method to test out
	 */
	public static void testSortMethod(Function<int[], SortData> sortMethod){
		
		// local lambda function for printing the metric data for one array
		Consumer<int[]> printMetrics = (array) -> {
			System.out.println(sortMethod.apply(array));
			System.out.println("Sorted: " + Arrays.toString(array));
		};
		
		// Temporarily store the lengths to pretty things up
		int inverSrtArrayLen = INVERSE_SORTED_ARRAY.length;
		int partSrtArrayLen = PARTIAL_SORTED_ARRAY.length;
		
		// print the data out using a copy of the two test arrays to avoid reseting the arrays
		System.out.println("Inversely Sorted Array:");
		printMetrics.accept(Arrays.copyOf(INVERSE_SORTED_ARRAY, inverSrtArrayLen)); 
		System.out.println(); // blank line for prettiness
		System.out.println("Partially Sorted Array:");
		printMetrics.accept(Arrays.copyOf(PARTIAL_SORTED_ARRAY, partSrtArrayLen));
	}
	
	// Obligatory comment
	public static void main(String[] args) {
		
		// test everything out one at a time
		System.out.println("--------------Bubble Sort--------------");
		testSortMethod(SortingOfAllSorts::bubbleSort);
		System.out.println("---------------------------------------\n");
		
		System.out.println("-------------Selection Sort------------");
		testSortMethod(SortingOfAllSorts::selectionSort);
		System.out.println("---------------------------------------\n");
	}

}



































