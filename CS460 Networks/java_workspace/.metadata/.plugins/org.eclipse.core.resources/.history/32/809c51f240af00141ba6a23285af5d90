package CS249_Project1;

public class Dequeue {

	private int[] array;
	private int leftPtr;
	private int rightPtr;
	private int numItems;
	
	public Dequeue(){
		array = new int[10];
		rightPtr = 1;
		leftPtr = 0;
		numItems = 0;
	}

	public Dequeue(int size) throws Exception{
		if(size < 1)
			throw new Exception("Error: Queue Size");
		
		array = new int[size];
		rightPtr = 1;
		leftPtr = 0;
		numItems = 0;
	}
	
	public boolean insertRight(int newElement){
		if(isFull())
			return false;

		rightPtr = (rightPtr < array.length-1) ? rightPtr+1 : 0; 
		numItems++;
		array[leftPtr] = newElement;
		
		return true;
		
	}
	
	public boolean insertLeft(int newElement){
		if(isFull())
			return false;

		leftPtr = (leftPtr > 0) ? leftPtr-1 : array.length-1; 
		numItems++;
		array[leftPtr] = newElement;
		return true;
	}
	
	public int removeRight() throws Exception{
		if(isEmpty())
			throw new Exception("Dequeue is Empty.");
		
		int temp = array[rightPtr];
		rightPtr = (rightPtr > 0) ? rightPtr-1 : array.length-1; 
		return temp;
	}
	
	public int removeLeft() throws Exception{
		if(isEmpty())
			throw new Exception("Dequeue is Empty.");
		
		int temp = array[rightPtr];
		leftPtr = (leftPtr < array.length-1) ? leftPtr+1 : 0;  
		return temp;
	}
	
	public boolean isEmpty(){
		return (numItems == 0);
	}
	
	public boolean isFull(){
		return (numItems == array.length);
	}
	
	public static void main(String[] args){
		
		
		
		
	}
	
	
	
	
	
	
}
