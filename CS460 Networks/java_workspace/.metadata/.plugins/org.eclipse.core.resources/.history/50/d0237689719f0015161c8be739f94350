package client;

import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Scanner;
import java.nio.file.Path;
import java.nio.file.Paths;

public class FileClient {
	@SuppressWarnings("resource")
	public static void main(String[] args) throws Exception {
		Socket clientSocket = null;
		OutputStream outToServer = null;
		InputStream inFromServer = null;

		/* Main server loop */
		while (true) {
			Scanner userinput = new Scanner(System.in);
			System.out.print("==> ");
			String commandLine = userinput.nextLine();
			String[] userVariables = commandLine.split(" ");
			System.out.println(Arrays.toString(userVariables));
			String returnline = " \r\n ";
			
			// If the user input a open request ---------------------------------------------
			if (userVariables[0].toUpperCase().equals("OPEN")) {
				if (userVariables.length != 3) 
					System.out.println("Error: Incorrect Parameters passed...");
				
				else {
					String server = userVariables[1];
					try{
						int port = Integer.parseInt(userVariables[2]);
						clientSocket = new Socket(server, port);
						System.out.println("Connected to server");
						// get socket streams for reading and writing
						outToServer = clientSocket.getOutputStream();
						inFromServer = clientSocket.getInputStream();
					} catch (Exception e){
						System.out.println("Failed to open socket...");
					}
				}
			}
			// -------------------------------------------------------------------------------
			
			// If the user input a get request -----------------------------------------------
			else if (userVariables[0].toUpperCase().equals("GET")) {

				if (userVariables.length != 3) 
					System.out.println("Error: Incorrect Parameters passed...");

				else {
					// variables for source and destination
					String sourcepath = userVariables[1];
					String destination = userVariables[2];
					
					// send the message out to the server
					outToServer.write(("GET " + sourcepath + returnline).getBytes());

					// wait for response 
					byte[] bytes = new byte[255];
					inFromServer.read(bytes);
					String serverResponse = new String(bytes);
					System.out.println("\nRecieved--------\n" + serverResponse);

					// split response into it's different fields 
					String[] returnVariables = serverResponse.split("\r\n");
					System.out.println("\n" + Arrays.toString(returnVariables));
					String responseType = returnVariables[0];
					
					// get the message to see if the file was received 
					int responseIndicator = Integer.parseInt(responseType.substring(5, 8));

					// if the file was properly received 
					if (responseIndicator == 200) {
						System.out.println("Confirmation 200: File received");
						String serverData = returnVariables[2];
						byte[] serverDataBytes = serverData.getBytes();
						String[] sourceVariables = sourcepath.split("/");
						String filename = sourceVariables[sourceVariables.length - 1];

						Path destinationpath;
						if (destination.charAt(destination.length() - 1) != '/')
							destinationpath = Paths.get(destination + "/" + filename);
						else
							destinationpath = Paths.get(destination + filename);

						System.out.println("Saving to " + destinationpath);

						Files.write(destinationpath, serverDataBytes);
					}
					
					// If File Not Found
					else if (responseIndicator == 404) {
						System.out.println("Error 404: File not found");
					}
				}  // end of else statement handling get request
			}
			// -------------------------------------------------------------------------------
			
			
			else if (userVariables[0].toUpperCase().equals("CLOSE")) {
				outToServer.write(("CLOSE" + returnline).getBytes());
				System.out.println("Closing connection");
				clientSocket.close();
			}

		} // end of server loop

	}

}